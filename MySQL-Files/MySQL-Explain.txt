Explain Command in MySQL

Q1: What do different columns in the output of EXPLAIN mean? What possible values can those have? What is the meaning of those values?
Ans: The Explain command is being used by a database designer so that he can better visualise and analyse the database whcih would help in the designing of the queries. The designer can better visualise how teh query processing works and it is also useful in the analysis of the slow queries.
An Explain command is followed by a Select command and therefore when you fire this query, the following parameters are returned.

id: This is an integer parameter that is assigned by the server starting with value 1. This value would indicate that the order in which the query optimizer decided to process the table. 

select_type: The type of query. Will be one of the following:
	SIMPLE – Simple query without any unions or subqueries
	PRIMARY – Outermost SELECT query
	UNION – Second or later SELECT query of a union
	DEPENDENT UNION – Second or later SELECT query of a union which is dependent on an outer query
	SUBQUERY – First SELECT query in a subquery
	DEPENDENT SUBQUERY – First SELECT query in a subquery, dependent on an outer query
	DERIVED – SELECT query used as a table in a FROM clause

Table – The table name or alias

Type – The access type (sometimes called the join type). This is the single most important piece of information given, as it indicates how efficiently the server was able to retrieve the requested rows of data. I cover each of the access types in detail below.

Possible_keys – Indexes which the server could possibly use to retrieve the requested rows from this table. Prior to version 5.0, MySQL was only able to use a single index per table in a query. 5.0 added the index_merge access type which allows multiple indexes to be used in certain cases.

Key – The index selected (if any) for this table. The index used is chosen based on the estimated amount of work the query optimizer thinks using each index will require. The current query optimizer attempts to minimize disk reads. A NULL value here means no index will be used, indicating a full table scan. You can use the FORCE INDEX, USE INDEX, and IGNORE INDEX query hints to guide the optimizer.

key_len – The number of bytes of the chosen index that the server will actually use. Mostly useful for determining how many parts of a multi-part index the server used.

rows – Estimated number of rows the optimizer thinks the server will have to examine in order to retrieve the requested rows. This number is based on table statistics and index selectivity.

Extra- Additional information pertaining to this table.
Distinct – Server is able to perform an optimization where it will stop searching for more rows for the current row combination after it has found the first matching row
Not exists – Server is able to do a LEFT JOIN optimization where it will not examine more rows in this table for the current row combination after it finds one row that matches the JOIN criteria.
range checked for each record – Server found no good index to use, but checks indexes for each row. Slow, but faster than a full table scan.
Using filesort – Server will need to do an extra pass to sort the rows.
Using index – Server is able to return rows directly from the index instead of doing an additional seek to read the actual rows. Generally good news.
Using temporary – Server will need to create a temporary table to hold results. Often occurs with differing GROUP BY and ORDER BY columns.
Using where – Server is using values in the WHERE clause to limit returned rows.

We use EXPLAIN to optimize slow SQL queries used in our application. Lets say we have a comments table in our application that has a foreign key, user_id, referencing to users table. EXPLAINing the query that finds all the comments made by a user gives us following result.

mysql> EXPLAIN SELECT * FROM comments WHERE user_id = 41;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1002345 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

mysql> SELECT count(id) FROM comments;

+-----------+
| count(id) |
+-----------+
| 1002345 |
+-----------+

2.1 The value under 'rows' column in the output of EXPLAIN query and SELECT query after it are same. What does it mean?
Ans: The rows which are shown in teh explain command is the estimate value of teh rows which the query optimizer or parser would think are needed to process the query. It is just an estimate and it may or may be correct all the time. This number has been derived from the table stats and index selection.
The count(id) command would start from the beginning to the end counting the rows.

2.2 Is the SELECT query optimal? If no, how do we optimize it?
Ans: Select is one of the necessary statements which are often used in the database. So, here are some of the ways that you can consider while optimizing the Select queries:
a. Using Indexes: This is one of the sure shot ways to improve the performance. The indexes are generally defined on those columns which are frequently used in your queries. The record seeking is much faster as compared to the full table scan first. This speeds up the query execution.
b. Query Performance Optimization: The Query Performance must be seen and analyses using the EXPLAIN keyword. This word is place in front of the query and would describe the course of execution of the query and the number of rows that would be needed to execute the query and deliver the result set sucesfully.
c. Adjusting System Variables: The inbuilt system variables also help in the optimization of the queries. The fine tuning of these variable also go in the long way in the optimization of the Select Statements.

In Rails world, we have someting called polymorphic associations (http://guides.rubyonrails.org/association_basics.html#polymorphic-associations). Lets say in our web application, we can let users comment on photographs and articles. Some of rows in comments table are represented as following:

mysql> SELECT * FROM comments LIMIT 5;

+----+------------------+----------------+---------+
| id | commentable_type | commentable_id | user_id |
+----+------------------+----------------+---------+
| 1 + Article | 1 | 1 |
+----+------------------+----------------+---------+
| 2 + Photo | 1 | 1 |
+----+------------------+----------------+---------+
| 3 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 4 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 5 + Article | 1 | 2 |
+----+------------------+----------------+---------+

When we need to fetch comments of a user on a particular Article or Photo we form a query like:

mysql> EXPLAIN SELECT * FROM comments WHERE commentable_id = 1 AND commentable_type = 'Article' AND user_id = 1;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1000025 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

It seems that we do not have any index on any of the columns. And whole comments table is scanned to fetch those comments.

3.1 We decide to index columns in comments table to optimize the SELECT query. What column(s) will you index in which order? Ask the exercise creator for a hint if you are confused.

Ans: The selection of index must be done in such a way that the most frequently used column must be selected as index. So, if we would be using the id a lot in our queries then it is always better to make it as the index.

Q4:
4.1 EXPLAIN a SELECT query against one of your databases which employs an INNER JOIN between two tables. What does the output look like? What does the values under different columns mean? Do you get only one row in EXPLAIN's output?

explain select A1.location from sandwiches as A1 inner join tastes on tastes.filling = A1.filling and tastes.name = "Jones";
+----+-------------+--------+-------+---------------+---------+---------+-------+------+---------------------------------------------+
| id | select_type | table  | type  | possible_keys | key     | key_len | ref   | rows | Extra                                       |
+----+-------------+--------+-------+---------------+---------+---------+-------+------+---------------------------------------------+
|  1 | SIMPLE      | tastes | ref   | PRIMARY       | PRIMARY | 42      | const |    1 | Using where; Using index                    |
|  1 | SIMPLE      | A1     | index | NULL          | PRIMARY | 126     | NULL  |   10 | Using where; Using index; Using join buffer |
+----+-------------+--------+-------+---------------+---------+---------+-------+------+---------------------------------------------+
2 rows in set (0.00 sec)

We get two rows above...

4.2 Form the same select query in above question using a subquery instead of a JOIN. What does the EXPLAIN output look like now? Which query is better and why?
Ans: 

mysql> explain select A1.location from  sandwiches as A1  where filling in  (select filling from tastes where name = "Jones");
+----+--------------------+--------+--------+---------------+---------+---------+------------+------+--------------------------+
| id | select_type        | table  | type   | possible_keys | key     | key_len | ref        | rows | Extra                    |
+----+--------------------+--------+--------+---------------+---------+---------+------------+------+--------------------------+
|  1 | PRIMARY            | A1     | index  | NULL          | PRIMARY | 126     | NULL       |   10 | Using where; Using index |
|  2 | DEPENDENT SUBQUERY | tastes | eq_ref | PRIMARY       | PRIMARY | 84      | const,func |    1 | Using where; Using index |
+----+--------------------+--------+--------+---------------+---------+---------+------------+------+--------------------------+
2 rows in set (0.00 sec)

We again get two rows above...





